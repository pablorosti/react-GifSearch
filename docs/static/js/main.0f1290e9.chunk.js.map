{"version":3,"sources":["components/AddCategory.jsx","components/GifCard.jsx","helpers/getImages.jsx","components/GifGrid.jsx","GifExpertApp.jsx","index.js"],"names":["AddCategory","setCategories","categories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","type","value","onChange","target","GifCard","titulo","url","className","src","alt","obtenerGifs","category","a","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGrid","setimages","useEffect","then","key","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"6MAGaA,EAAc,SAAC,GAAqC,IAAlCC,EAAiC,EAAjCA,cAAeC,EAAkB,EAAlBA,WAAkB,EAExBC,mBAAS,IAFe,mBAErDC,EAFqD,KAEzCC,EAFyC,KAiB5D,OACI,0BAAMC,SAVW,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,GAC1BT,EAAc,CAACG,GAAF,mBAAiBF,OAO9B,2BACIS,KAAK,OACLC,MAAOR,EACPS,SAlBc,SAACN,GACvBF,EAAcE,EAAEO,OAAOF,YCNlBG,EAAU,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,OAAQC,EAAS,EAATA,IAC7B,OACI,yBAAKC,UAAU,0CACX,yBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,2BAAIA,K,uBCJHK,EAAW,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACjBN,EADiB,mGACiFK,GADjF,SAGJE,MAAMP,GAHF,cAGjBQ,EAHiB,gBAIFA,EAAKC,OAJH,uBAIhBC,EAJgB,EAIhBA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GACnB,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXf,IAAKa,EAAIG,OAAOC,iBAAiBjB,QAVlB,kBAchBW,GAdgB,4CAAH,sDCGXO,EAAU,SAAC,GAAmB,IAAhBb,EAAe,EAAfA,SAAe,EAEVnB,mBAAS,IAFC,mBAE/B8B,EAF+B,KAEvBG,EAFuB,KAStC,OALAC,qBAAW,WACPhB,EAAYC,GAAUgB,KAAMF,KAC7B,CAACd,IAIA,oCACI,wBAAIJ,UAAU,qCAAd,IAAqDI,EAArD,KACA,yBAAKJ,UAAU,aAEPe,EAAOJ,KAAK,SAAAC,GACR,OAAO,kBAAC,EAAD,CACKS,IAAKT,EAAIC,GACTf,OAAQc,EAAIE,MACZf,IAAKa,EAAIb,YCnBhCuB,EAAe,WAAO,IAAD,EAEMrC,mBAAS,IAFf,mBAEvBD,EAFuB,KAEXD,EAFW,KAI9B,OACI,oCACG,8CAEA,kBAAC,EAAD,CACKA,cAAeA,EACfC,WAAYA,IAGjB,6BAGIA,EAAW2B,KAAK,SAAAP,GACZ,OAAO,kBAAC,EAAD,CAASA,SAAYA,EAAUiB,IAAKjB,SCf9DmB,IAASC,OAEP,kBAAC,EAAD,MAEAC,SAASC,eAAe,U","file":"static/js/main.0f1290e9.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ( { setCategories, categories } ) => {\r\n\r\n    const [inputValue, setinputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setinputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if(inputValue.trim().length > 0){\r\n            setCategories([inputValue, ...categories])\r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n        <form onSubmit = { handleSubmit }>\r\n            <input \r\n                type='text'\r\n                value={inputValue}\r\n                onChange = { handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired,\r\n    categories: PropTypes.array.isRequired\r\n}\r\n\r\n","import React from 'react'\r\n\r\nexport const GifCard = ({titulo, url}) => {\r\n    return (\r\n        <div className='card animate__animated animate__fadeIn'>\r\n            <img src={url} alt={titulo}/>\r\n            <p>{titulo}</p>\r\n        </div>\r\n    )\r\n}\r\n","\r\n\r\nexport const obtenerGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=dLh1B96mdTnJ9eogk5LA67lZPTx7AGXD&limit=10&q=${category}`;\r\n\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map( img=>{\r\n        return{\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport {GifCard} from './GifCard'\r\nimport {obtenerGifs} from '../helpers/getImages'\r\n\r\n\r\nexport const GifGrid = ( { category }) => {\r\n\r\n    const [images, setimages] = useState([])\r\n\r\n    useEffect( () => {\r\n        obtenerGifs(category).then( setimages)\r\n    }, [category] )\r\n\r\n    \r\n    return (\r\n        <>\r\n            <h3 className='animate__animated animate__fadeIn'> { category } </h3>\r\n            <div className='grid-card'>\r\n                {\r\n                    images.map( img => {\r\n                        return <GifCard\r\n                                    key={img.id}\r\n                                    titulo={img.title}\r\n                                    url={img.url}\r\n                                />\r\n                    })\r\n                }\r\n                \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React,{ useState } from 'react'\r\nimport {AddCategory} from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid'\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState([]);\r\n\r\n    return (\r\n        <>\r\n           <h2>Gif Expert App</h2> \r\n\r\n           <AddCategory \r\n                setCategories={setCategories}\r\n                categories={categories}\r\n           />\r\n\r\n           <hr/>\r\n\r\n           {\r\n               categories.map( category =>{\r\n                   return <GifGrid category = {category} key={category}/>\r\n               } )\r\n           }\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {GifExpertApp} from './GifExpertApp'\n\n\nReactDOM.render(\n\n  <GifExpertApp/>,\n  \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}